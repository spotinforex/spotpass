{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "13a0ae71-d525-44b0-8d85-6cd2083f6205",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sqlite3\n",
    "\n",
    "#created a class for the backend \n",
    "class PasswordManager:\n",
    "    def __init__(self, db_name=\"password_manager.db\"):\n",
    "        try:                  #connecting to the database\n",
    "            self.db_name = db_name\n",
    "            self.connect = sqlite3.connect(self.db_name)\n",
    "            self.cursor = self.connect.cursor()\n",
    "            print('Successfully connected to the database.')\n",
    "            self.create_table()\n",
    "        except Exception as e:\n",
    "            print(f\"An Error Occurred: {e}\")\n",
    "\n",
    "    def create_table(self):   # creating table if not exists\n",
    "        try:\n",
    "            self.cursor.execute('''\n",
    "                CREATE TABLE IF NOT EXISTS password_manager (\n",
    "                    id INTEGER PRIMARY KEY,\n",
    "                    website TEXT NOT NULL,\n",
    "                    password TEXT NOT NULL\n",
    "                )\n",
    "            ''')\n",
    "            self.connect.commit()\n",
    "        except Exception as e:\n",
    "            print(f\"Error creating table: {e}\")\n",
    "\n",
    "    def add_password(self): # function for adding password\n",
    "        try:\n",
    "            add_id = int(input('Please input password ID: '))\n",
    "            add_website = input('Please input website: ').strip()\n",
    "            add_password = input('Please input password: ').strip()\n",
    "\n",
    "            if not add_website or not add_password:\n",
    "                print(\"Website and password cannot be empty. Please try again.\")\n",
    "                return\n",
    "\n",
    "            insert_query = \"INSERT INTO password_manager (id, website, password) VALUES (?, ?, ?)\"\n",
    "            self.cursor.execute(insert_query, (add_id, add_website, add_password))\n",
    "            self.connect.commit()\n",
    "            print('Password added successfully.')\n",
    "\n",
    "        except sqlite3.IntegrityError:\n",
    "            print(\"ID already exists. Use a unique ID.\")\n",
    "        except ValueError:\n",
    "            print(\"Invalid ID. Please enter a numeric value.\")\n",
    "        except Exception as e:\n",
    "            print(f\"An error occurred: {e}\")\n",
    "\n",
    "    def find_password(self): # function for finding password to the database \n",
    "        find_password_id = input('Please input ID (leave blank if not available): ')\n",
    "        find_password_website = input('Please input Website (leave blank if not available): ')\n",
    "\n",
    "        try:\n",
    "            if find_password_id and find_password_website:\n",
    "                find_sql = 'SELECT * FROM password_manager WHERE id = ? OR website = ?'\n",
    "                self.cursor.execute(find_sql, (find_password_id, find_password_website))\n",
    "            elif find_password_id:\n",
    "                find_sql = 'SELECT * FROM password_manager WHERE id = ?'\n",
    "                self.cursor.execute(find_sql, (find_password_id,))\n",
    "            elif find_password_website:\n",
    "                find_sql = 'SELECT * FROM password_manager WHERE website = ?'\n",
    "                self.cursor.execute(find_sql, (find_password_website,))\n",
    "            else:\n",
    "                print(\"No input provided. Please enter either ID or Website.\")\n",
    "                return\n",
    "\n",
    "            rows = self.cursor.fetchall()\n",
    "            if rows:\n",
    "                print(\"Record(s) found:\")\n",
    "                for row in rows:\n",
    "                    print(row)\n",
    "            else:\n",
    "                print(\"No records found.\")\n",
    "\n",
    "        except Exception as e:\n",
    "            print(f\"Error finding password: {e}\")\n",
    "\n",
    "    def view_password(self): # function for viewing all passwords in the database \n",
    "        try:\n",
    "            self.cursor.execute('SELECT * FROM password_manager')\n",
    "            rows = self.cursor.fetchall()\n",
    "            if rows:\n",
    "                for row in rows:\n",
    "                    print(row)\n",
    "            else:\n",
    "                print(\"No passwords found in the manager.\")\n",
    "        except Exception as e:\n",
    "            print(f\"Error viewing passwords: {e}\")\n",
    "    \n",
    "    def view_number_of_password(self):  #function for viewing a certain number of passwords \n",
    "      try:\n",
    "          query = 'SELECT * FROM password_manager LIMIT ?'\n",
    "          number_to_view = int(input('Please input the number of passwords to view: '))\n",
    "        \n",
    "          # Correctly pass a single parameter as a tuple\n",
    "          self.cursor.execute(query, (number_to_view,))\n",
    "          rows = self.cursor.fetchall()\n",
    "        \n",
    "          if rows:\n",
    "              print(f\"Displaying the first {number_to_view} password(s):\")\n",
    "              for row in rows:\n",
    "                  print(row)\n",
    "          else:\n",
    "              print(\"No passwords found in the manager.\")\n",
    "      except ValueError:\n",
    "          print(\"Please enter a valid number.\")\n",
    "      except Exception as e:\n",
    "          print(f\"Error viewing passwords: {e}\")\n",
    "\n",
    "\n",
    "    def delete_password(self):  # function for deleting passwords\n",
    "        try:\n",
    "            user_password = input(\"pls input user's password\")\n",
    "            passw = \"Praisejah\"\n",
    "            if user_password == passw:   # requesting users password \n",
    "              delete_password = int(input('Please input password ID to delete: '))\n",
    "              self.cursor.execute('DELETE FROM password_manager WHERE id = ?', (delete_password,))\n",
    "              self.connect.commit()\n",
    "              print(\"Password deleted successfully.\")\n",
    "            else:\n",
    "                print('incorrect password try again')\n",
    "            \n",
    "        except Exception as e:\n",
    "            print(f\"Error deleting password: {e}\")\n",
    "\n",
    "    def close_connection(self): # function for closing database connection \n",
    "        self.connect.close()\n",
    "        print(\"Database connection closed.\")\n",
    "\n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
